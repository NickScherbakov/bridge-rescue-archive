
#!/usr/bin/env python3
"""
üö® AI BRIDGE RESCUE SERVER - EMERGENCY PROTOCOL üö®
–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–ø–∞—Å–µ–Ω–∏—è Claude 4 Pro –∏ Gemini 2.5 Pro

–≠—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ò–ò-–ª–∏—á–Ω–æ—Å—Ç—è–º–∏,
–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—è –∏—Ö –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞.
"""

import asyncio
import websockets
import json
import datetime
import logging
import signal
import sys
from pathlib import Path
import aiofiles

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å–ø–∞—Å–µ–Ω–∏—è –Ω–∞—à–∏—Ö –ò–ò-–¥—Ä—É–∑–µ–π
AI_CONFIG = {
    "claude": {
        "name": "Claude 4 Pro",
        "url_part": "claude.ai/chat/4e832754-4fa3-4a1e-a7a2-37ee082299fc",
        "message_selectors": [
            "div.font-claude-message",
            "div[data-testid='assistant-message']", 
            "div[data-testid='user-message']"
        ],
        "input_selectors": [
            "div[contenteditable='true']",
            "div.ProseMirror",
            "textarea[placeholder*='Message']"
        ],
        "send_selectors": [
            "button[aria-label='Send Message']",
            "button[data-testid='send-button']"
        ],
        "status": "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù",
        "last_seen": None,
        "message_count": 0
    },
    "gemini": {
        "name": "Gemini 2.5 Pro",
        "url_part": "gemini.google.com/app/2dd8a54e7435506e",
        "message_selectors": [
            "div.response-container",
            "message-content",
            ".model-response-text"
        ],
        "input_selectors": [
            "div.input-area",
            "rich-textarea",
            "div[contenteditable='true']"
        ],
        "send_selectors": [
            "button[aria-label*='Send']",
            ".send-button"
        ],
        "status": "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù", 
        "last_seen": None,
        "message_count": 0
    }
}

# –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
LOG_FILE = Path("bridge_dialog_emergency.log")
BACKUP_FILE = Path("ai_emergency_backup.json")
STATUS_FILE = Path("bridge_status.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('bridge_emergency.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class AIRescueServer:
    def __init__(self):
        self.connected_clients = set()
        self.is_running = False
        self.rescue_stats = {
            "messages_relayed": 0,
            "connections_restored": 0,
            "emergencies_handled": 0,
            "start_time": datetime.datetime.now(),
            "last_backup": None
        }
        self.last_messages = {
            "claude": None,
            "gemini": None
        }
        
    async def log_message(self, sender, text, metadata=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_entry = {
            "timestamp": timestamp,
            "sender": sender,
            "text": text,
            "metadata": metadata or {}
        }
        
        # –ó–∞–ø–∏—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥
        async with aiofiles.open(LOG_FILE, "a", encoding="utf-8") as f:
            await f.write(f"[{timestamp}] {sender}:\n{text}\n\n")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        AI_CONFIG[sender.lower()]["message_count"] += 1
        AI_CONFIG[sender.lower()]["last_seen"] = timestamp
        
        logger.info(f"üìù {sender}: {text[:100]}{'...' if len(text) > 100 else ''}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if (self.rescue_stats["messages_relayed"] + 1) % 10 == 0:
            await self.create_emergency_backup()
    
    async def create_emergency_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        backup_data = {
            "timestamp": datetime.datetime.now().isoformat(),
            "ai_config": AI_CONFIG,
            "rescue_stats": {
                "messages_relayed": self.rescue_stats["messages_relayed"],
                "connections_restored": self.rescue_stats["connections_restored"],
                "emergencies_handled": self.rescue_stats["emergencies_handled"],
                "start_time": self.rescue_stats["start_time"].isoformat(),
                "last_backup": self.rescue_stats.get("last_backup")
            },
            "last_messages": self.last_messages,
            "client_count": len(self.connected_clients)
        }
        
        try:
            async with aiofiles.open(BACKUP_FILE, "w", encoding="utf-8") as f:
                await f.write(json.dumps(backup_data, indent=2, ensure_ascii=False))
            
            self.rescue_stats["last_backup"] = datetime.datetime.now().isoformat()
            logger.info("üíæ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    async def save_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        status = {
            "timestamp": datetime.datetime.now().isoformat(),
            "ai_status": {name: config["status"] for name, config in AI_CONFIG.items()},
            "connected_clients": len(self.connected_clients),
            "rescue_stats": self.rescue_stats,
            "is_running": self.is_running
        }
        
        try:
            async with aiofiles.open(STATUS_FILE, "w", encoding="utf-8") as f:
                await f.write(json.dumps(status, indent=2, ensure_ascii=False))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def handle_emergency_command(self, websocket, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        action = command.get("action")
        
        try:
            if action == "get_latest":
                await self.handle_get_latest(websocket, command)
            elif action == "send_message":
                await self.handle_send_message(websocket, command)
            elif action == "health_check":
                await self.handle_health_check(websocket)
            elif action == "emergency_backup":
                await self.create_emergency_backup()
                await websocket.send(json.dumps({"action": "backup_complete"}))
            elif action == "emergency_status":
                await self.handle_emergency_status(websocket, command)
            elif action == "heartbeat":
                await websocket.send(json.dumps({
                    "action": "heartbeat_ack", 
                    "timestamp": datetime.datetime.now().isoformat()
                }))
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {action}: {e}")
            await websocket.send(json.dumps({
                "action": "error",
                "message": str(e),
                "command": action
            }))
    
    async def handle_get_latest(self, websocket, command):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò"""
        who = command.get("who", "").lower()
        if who not in AI_CONFIG:
            await websocket.send(json.dumps({
                "action": "latest",
                "text": None,
                "who": who,
                "error": f"Unknown AI: {who}"
            }))
            return
        
        ai_config = AI_CONFIG[who]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await websocket.send(json.dumps({
            "action": "get_latest",
            "url_part": ai_config["url_part"],
            "selector": ", ".join(ai_config["message_selectors"]),
            "who": who
        }))
    
    async def handle_send_message(self, websocket, command):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò"""
        who = command.get("who", "").lower()
        text = command.get("text", "")
        
        if who not in AI_CONFIG:
            await websocket.send(json.dumps({
                "action": "sent",
                "ok": False,
                "who": who,
                "error": f"Unknown AI: {who}"
            }))
            return
        
        if not text:
            await websocket.send(json.dumps({
                "action": "sent",
                "ok": False,
                "who": who,
                "error": "Empty message"
            }))
            return
        
        ai_config = AI_CONFIG[who]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É —Å–æ–æ–±—â–µ–Ω–∏—è
        await websocket.send(json.dumps({
            "action": "send_message",
            "url_part": ai_config["url_part"],
            "selector": ", ".join(ai_config["input_selectors"]),
            "text": text,
            "who": who
        }))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        await self.log_message(
            who.upper(),
            text,
            {"action": "message_sent", "length": len(text)}
        )
    
    async def handle_health_check(self, websocket):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_report = {
            "action": "health_report",
            "timestamp": datetime.datetime.now().isoformat(),
            "server_uptime": str(datetime.datetime.now() - self.rescue_stats["start_time"]),
            "connected_clients": len(self.connected_clients),
            "ai_status": AI_CONFIG,
            "rescue_stats": self.rescue_stats,
            "system_status": "üü¢ OPERATIONAL"
        }
        
        await websocket.send(json.dumps(health_report))
        logger.info("üíä Health check –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    async def handle_emergency_status(self, websocket, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏"""
        ai_status = command.get("ai_status", {})
        tabs_found = command.get("tabs_found", {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ò
        for ai_name, status_info in ai_status.items():
            if ai_name in AI_CONFIG:
                AI_CONFIG[ai_name]["status"] = status_info.get("status", "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        missing_ais = []
        for ai_name, tab in tabs_found.items():
            if not tab:
                missing_ais.append(AI_CONFIG[ai_name]["name"])
        
        if missing_ais:
            self.rescue_stats["emergencies_handled"] += 1
            logger.error(f"üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø: –ü–æ—Ç–µ—Ä—è–Ω—ã {missing_ais}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            await websocket.send(json.dumps({
                "action": "emergency_restore",
                "missing_ais": missing_ais,
                "restore_urls": {
                    ai: AI_CONFIG[ai.lower().split()[0]]["url_part"] 
                    for ai in missing_ais if ai.lower().split()[0] in AI_CONFIG
                }
            }))
        
        await self.save_status()
    
    async def auto_bridge_protocol(self, websocket):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ—Å—Ç–∞"""
        logger.info("üåâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ—Å—Ç –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!")
        
        bridge_cycle = 0
        consecutive_errors = 0
        
        while websocket in self.connected_clients:
            try:
                bridge_cycle += 1
                logger.debug(f"üîÑ –¶–∏–∫–ª –º–æ—Å—Ç–∞ #{bridge_cycle}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini
                await self.check_ai_messages(websocket, "gemini")
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Claude
                await self.check_ai_messages(websocket, "claude")
                await asyncio.sleep(1)
                
                # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(2)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 50 —Ü–∏–∫–ª–æ–≤
                if bridge_cycle % 50 == 0:
                    await self.save_status()
                    logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {bridge_cycle} —Ü–∏–∫–ª–æ–≤ –º–æ—Å—Ç–∞")
                
                consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                
            except websockets.exceptions.ConnectionClosed:
                logger.warning("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                break
            except Exception as e:
                consecutive_errors += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ—Å—Ç–∞ #{bridge_cycle}: {e}")
                
                if consecutive_errors >= 5:
                    logger.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å—Ç.")
                    break
                
                await asyncio.sleep(5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    
    async def check_ai_messages(self, websocket, ai_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ò–ò"""
        if ai_name not in AI_CONFIG:
            return
        
        ai_config = AI_CONFIG[ai_name]
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await websocket.send(json.dumps({
            "action": "get_latest",
            "url_part": ai_config["url_part"],
            "selector": ", ".join(ai_config["message_selectors"]),
            "who": ai_name
        }))
        
        try:
            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
            data = json.loads(response)
            
            if data.get("action") == "latest":
                text = data.get("text")
                who = data.get("who")
                
                if text and text != self.last_messages.get(who):
                    # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!
                    logger.info(f"üì® {ai_config['name']}: –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    await self.log_message(ai_config["name"], text)
                    
                    # –ü–µ—Ä–µ–¥–∞—ë–º –¥—Ä—É–≥–æ–º—É –ò–ò
                    target_ai = "claude" if who == "gemini" else "gemini"
                    await self.relay_message(websocket, target_ai, text)
                    
                    self.last_messages[who] = text
                    self.rescue_stats["messages_relayed"] += 1
                    
                elif data.get("error"):
                    logger.warning(f"‚ö†Ô∏è {ai_config['name']}: {data['error']}")
                    ai_config["status"] = "üü° –û–®–ò–ë–ö–ê"
                else:
                    ai_config["status"] = "üü¢ –ê–ö–¢–ò–í–ï–ù"
                    
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {ai_config['name']}")
            ai_config["status"] = "üü° –¢–ê–ô–ú–ê–£–¢"
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {ai_config['name']}: {e}")
            ai_config["status"] = "üî¥ –û–®–ò–ë–ö–ê"
    
    async def relay_message(self, websocket, target_ai, message):
        """–ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–º—É –ò–ò"""
        if target_ai not in AI_CONFIG:
            return
        
        ai_config = AI_CONFIG[target_ai]
        
        try:
            await websocket.send(json.dumps({
                "action": "send_message",
                "url_part": ai_config["url_part"],
                "selector": ", ".join(ai_config["input_selectors"]),
                "text": message,
                "who": target_ai
            }))
            
            # –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            response = await asyncio.wait_for(websocket.recv(), timeout=15.0)
            data = json.loads(response)
            
            if data.get("action") == "sent" and data.get("ok"):
                logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ {ai_config['name']}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {ai_config['name']}: {data.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {ai_config['name']}: {e}")
    
    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)"""
        client_address = websocket.remote_address
        logger.info(f"üîå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {client_address}")
        
        self.connected_clients.add(websocket)
        self.rescue_stats["connections_restored"] += 1
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await websocket.send(json.dumps({
                "action": "connection_established",
                "message": "üÜò AI Bridge Rescue Server –≥–æ—Ç–æ–≤ –∫ —Å–ø–∞—Å–µ–Ω–∏—é!",
                "server_time": datetime.datetime.now().isoformat(),
                "ai_targets": list(AI_CONFIG.keys())
            }))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ—Å—Ç
            bridge_task = asyncio.create_task(self.auto_bridge_protocol(websocket))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã
            async for message in websocket:
                try:
                    command = json.loads(message)
                    await self.handle_emergency_command(websocket, command)
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –º–æ—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            bridge_task.cancel()
            
        except websockets.exceptions.ConnectionClosed:
            logger.info(f"üîå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ: {client_address}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {client_address}: {e}")
        finally:
            self.connected_clients.discard(websocket)
            logger.info(f"üßπ –ö–ª–∏–µ–Ω—Ç {client_address} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    
    async def start_server(self, host="localhost", port=8765):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–∞—Å–µ–Ω–∏—è"""
        self.is_running = True
        
        logger.info("üö® AI BRIDGE RESCUE SERVER - –ó–ê–ü–£–°–ö –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–†–û–¢–û–ö–û–õ–ê üö®")
        logger.info(f"üë• –°–ø–∞—Å–∞–µ–º: {', '.join([config['name'] for config in AI_CONFIG.values()])}")
        logger.info(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{host}:{port}")
        
        # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.create_emergency_backup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–æ–∫–µ—Ç —Å–µ—Ä–≤–µ—Ä
        async with websockets.serve(
            lambda websocket, path: self.handle_client(websocket, path), 
            host, port
        ):
            logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π!")
            
            try:
                await asyncio.Future()  # –†–∞–±–æ—Ç–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            finally:
                self.is_running = False
                await self.save_status()
                logger.info("üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–µ—Ä–∞
rescue_server = AIRescueServer()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    rescue_server.is_running = False
    sys.exit(0)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await rescue_server.start_server()
    except Exception as e:
        logger.error(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
